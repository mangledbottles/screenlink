generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Upload {
  id          String   @id @default(cuid())
  provider    String // can be 'mux' or 'cloudflare'
  uploadLink  String   @db.VarChar(2048)
  assetId     String
  uploadId    String
  playbackId  String?
  status      String   @default("unknown")
  sourceTitle String?  @default("ScreenLink Recording") @db.VarChar(2048)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
  views       Int      @default(0)
  deviceId    String?
  Device      Devices? @relation(fields: [deviceId], references: [id])

  @@index([deviceId])
  @@index([userId])
  @@index([projectId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Plan {
  Free
  Pro
  Growth
}

model Project {
  id                String         @id @default(cuid())
  name              String         @default("My Project")
  users             ProjectUsers[]
  uploads           Upload[]
  monthlyUploads    Int            @default(1000)
  startDate         DateTime       @default(now())
  billingCycleStart Int? // The day of the month the billing cycle starts
  isActive          Boolean        @default(true)
  plan              Plan           @default(Free)
  stripeId          String?        @unique
  referenceId       String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  billingAdminId    String? // The user who is responsible for billing

  @@index([id])
}

enum Role {
  owner
  member
}

model ProjectUsers {
  userId    String
  projectId String
  role      Role     @default(member)
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, projectId])
  @@index([projectId])
  @@index([userId])
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  currentProjectId String?
  accounts         Account[]
  sessions         Session[]
  projects         ProjectUsers[]
  uploads          Upload[]
  devices          Devices[]
}

model Devices {
  id           String    @id @default(cuid())
  userId       String
  name         String
  type         String
  code         String    @unique
  appVersion   String
  revoked      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUploadAt DateTime?
  uploads      Upload[]

  @@index([id])
  @@index([userId])
}

model NotificationSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  ipAddress String?

  @@index([email])
}
